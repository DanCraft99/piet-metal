//  Copyright 2019 The xi-editor authors.

// This file is currently something of a mishmash of handwritten and
// autogenerated header info.

typedef struct
{
    // This is a clip space coordinate (-1 to 1).
    vector_float2 position;
    // This is now an integer coordinate for reading the texture.
    vector_float2 textureCoordinate;
} RenderVertex;

typedef enum RenderVertexInputIndex
{
    RenderVertexInputIndexVertices = 0,
} RenderVertexInputIndex;

// Size in pixels of an individual tile
#define tileWidth 16
#define tileHeight 16

// Size (in tiles) of a threadgroup for tiling
#define tilerGroupWidth 16
#define tilerGroupHeight 2

// The number of bytes in a buffer for a single tile.
// For prototyping, this is a hard maximum, but for production we'd want
// a mechanism to overflow.
#define tileBufSize 4096

// For simplicity, we're going to hardcode these dimensions. For production,
// they need to be dynamic.
#define maxTilesWidth 256
#define maxTilesHeight 256

// This should be an enum but the storage needs to be of fixed size
#define PIET_ITEM_CIRCLE 1
#define PIET_ITEM_LINE 2
#define PIET_ITEM_FILL 3
#define PIET_ITEM_STROKE_POLYLINE 4

// Autogen part follows:

typedef uint SimpleGroupRef;
typedef uint PietCircleRef;
typedef uint PietStrokeLineRef;
typedef uint PietFillRef;
typedef uint PietStrokePolyLineRef;
typedef uint PietItemRef;
struct SimpleGroupPacked {
    uint n_items;
    PietItemRef items_ix;
    ushort4 bbox;
};
SimpleGroupPacked SimpleGroup_read(const device char *buf, SimpleGroupRef ref) {
    return *((const device SimpleGroupPacked *)(buf + ref));
}
uint SimpleGroup_n_items(const device char *buf, SimpleGroupRef ref) {
    return ((const device SimpleGroupPacked *)(buf + ref))->n_items;
}
PietItemRef SimpleGroup_items_ix(const device char *buf, SimpleGroupRef ref) {
    return ((const device SimpleGroupPacked *)(buf + ref))->items_ix;
}
ushort4 SimpleGroup_bbox(const device char *buf, SimpleGroupRef ref) {
    return ((const device SimpleGroupPacked *)(buf + ref))->bbox;
}
struct PietCirclePacked {
    uint tag;
};
PietCirclePacked PietCircle_read(const device char *buf, PietCircleRef ref) {
    return *((const device PietCirclePacked *)(buf + ref));
}
struct PietStrokeLinePacked {
    uint tag;
    uint flags;
    uint rgba_color;
    float width;
    float2 start;
    float2 end;
};
PietStrokeLinePacked PietStrokeLine_read(const device char *buf, PietStrokeLineRef ref) {
    return *((const device PietStrokeLinePacked *)(buf + ref));
}
uint PietStrokeLine_flags(const device char *buf, PietStrokeLineRef ref) {
    return ((const device PietStrokeLinePacked *)(buf + ref))->flags;
}
uint PietStrokeLine_rgba_color(const device char *buf, PietStrokeLineRef ref) {
    return ((const device PietStrokeLinePacked *)(buf + ref))->rgba_color;
}
float PietStrokeLine_width(const device char *buf, PietStrokeLineRef ref) {
    return ((const device PietStrokeLinePacked *)(buf + ref))->width;
}
float2 PietStrokeLine_start(const device char *buf, PietStrokeLineRef ref) {
    return ((const device PietStrokeLinePacked *)(buf + ref))->start;
}
float2 PietStrokeLine_end(const device char *buf, PietStrokeLineRef ref) {
    return ((const device PietStrokeLinePacked *)(buf + ref))->end;
}
struct PietFillPacked {
    uint tag;
    uint flags;
    uint rgba_color;
    uint n_points;
    uint points_ix;
};
PietFillPacked PietFill_read(const device char *buf, PietFillRef ref) {
    return *((const device PietFillPacked *)(buf + ref));
}
uint PietFill_flags(const device char *buf, PietFillRef ref) {
    return ((const device PietFillPacked *)(buf + ref))->flags;
}
uint PietFill_rgba_color(const device char *buf, PietFillRef ref) {
    return ((const device PietFillPacked *)(buf + ref))->rgba_color;
}
uint PietFill_n_points(const device char *buf, PietFillRef ref) {
    return ((const device PietFillPacked *)(buf + ref))->n_points;
}
uint PietFill_points_ix(const device char *buf, PietFillRef ref) {
    return ((const device PietFillPacked *)(buf + ref))->points_ix;
}
struct PietStrokePolyLinePacked {
    uint tag;
    uint rgba_color;
    float width;
    uint n_points;
    uint points_ix;
};
PietStrokePolyLinePacked PietStrokePolyLine_read(const device char *buf, PietStrokePolyLineRef ref) {
    return *((const device PietStrokePolyLinePacked *)(buf + ref));
}
uint PietStrokePolyLine_rgba_color(const device char *buf, PietStrokePolyLineRef ref) {
    return ((const device PietStrokePolyLinePacked *)(buf + ref))->rgba_color;
}
float PietStrokePolyLine_width(const device char *buf, PietStrokePolyLineRef ref) {
    return ((const device PietStrokePolyLinePacked *)(buf + ref))->width;
}
uint PietStrokePolyLine_n_points(const device char *buf, PietStrokePolyLineRef ref) {
    return ((const device PietStrokePolyLinePacked *)(buf + ref))->n_points;
}
uint PietStrokePolyLine_points_ix(const device char *buf, PietStrokePolyLineRef ref) {
    return ((const device PietStrokePolyLinePacked *)(buf + ref))->points_ix;
}
struct PietItem {
    uint tag;
    uint body[7];
};
PietItem PietItem_read(const device char *buf, PietItemRef ref) {
    return *((const device PietItem *)(buf + ref));
}
uint PietItem_tag(const device char *buf, PietItemRef ref) {
    return ((const device PietItem *)(buf + ref))->tag;
}
#define PietItem_Circle 1
PietCirclePacked PietCircle_load(const thread PietItem &s) {
    PietCirclePacked r;
    r.tag = s.tag;
    return r;
}
#define PietItem_Line 2
PietStrokeLinePacked PietStrokeLine_load(const thread PietItem &s) {
    PietStrokeLinePacked r;
    r.tag = s.tag;
    r.flags = *((const thread uint *)((const thread char *)&s + 4));
    r.rgba_color = *((const thread uint *)((const thread char *)&s + 8));
    r.width = *((const thread float *)((const thread char *)&s + 12));
    r.start = *((const thread float2 *)((const thread char *)&s + 16));
    r.end = *((const thread float2 *)((const thread char *)&s + 24));
    return r;
}
#define PietItem_Fill 3
PietFillPacked PietFill_load(const thread PietItem &s) {
    PietFillPacked r;
    r.tag = s.tag;
    r.flags = *((const thread uint *)((const thread char *)&s + 4));
    r.rgba_color = *((const thread uint *)((const thread char *)&s + 8));
    r.n_points = *((const thread uint *)((const thread char *)&s + 12));
    r.points_ix = *((const thread uint *)((const thread char *)&s + 16));
    return r;
}
#define PietItem_Poly 4
PietStrokePolyLinePacked PietStrokePolyLine_load(const thread PietItem &s) {
    PietStrokePolyLinePacked r;
    r.tag = s.tag;
    r.rgba_color = *((const thread uint *)((const thread char *)&s + 4));
    r.width = *((const thread float *)((const thread char *)&s + 8));
    r.n_points = *((const thread uint *)((const thread char *)&s + 12));
    r.points_ix = *((const thread uint *)((const thread char *)&s + 16));
    return r;
}

typedef uint CmdCircleRef;
typedef uint CmdLineRef;
typedef uint CmdStrokeRef;
typedef uint CmdFillRef;
typedef uint CmdFillEdgeRef;
typedef uint CmdDrawFillRef;
typedef uint CmdSolidRef;
typedef uint CmdRef;
struct CmdCirclePacked {
    uint tag;
    ushort4 bbox;
};
CmdCirclePacked CmdCircle_read(const device char *buf, CmdCircleRef ref) {
    return *((const device CmdCirclePacked *)(buf + ref));
}
ushort4 CmdCircle_bbox(const device char *buf, CmdCircleRef ref) {
    return ((const device CmdCirclePacked *)(buf + ref))->bbox;
}
struct CmdLinePacked {
    uint tag;
    float2 start;
    float2 end;
};
CmdLinePacked CmdLine_read(const device char *buf, CmdLineRef ref) {
    return *((const device CmdLinePacked *)(buf + ref));
}
float2 CmdLine_start(const device char *buf, CmdLineRef ref) {
    return ((const device CmdLinePacked *)(buf + ref))->start;
}
float2 CmdLine_end(const device char *buf, CmdLineRef ref) {
    return ((const device CmdLinePacked *)(buf + ref))->end;
}
struct CmdStrokePacked {
    uint tag;
    float halfWidth;
    uint rgba_color;
};
CmdStrokePacked CmdStroke_read(const device char *buf, CmdStrokeRef ref) {
    return *((const device CmdStrokePacked *)(buf + ref));
}
float CmdStroke_halfWidth(const device char *buf, CmdStrokeRef ref) {
    return ((const device CmdStrokePacked *)(buf + ref))->halfWidth;
}
uint CmdStroke_rgba_color(const device char *buf, CmdStrokeRef ref) {
    return ((const device CmdStrokePacked *)(buf + ref))->rgba_color;
}
struct CmdFillPacked {
    uint tag;
    float2 start;
    float2 end;
};
CmdFillPacked CmdFill_read(const device char *buf, CmdFillRef ref) {
    return *((const device CmdFillPacked *)(buf + ref));
}
float2 CmdFill_start(const device char *buf, CmdFillRef ref) {
    return ((const device CmdFillPacked *)(buf + ref))->start;
}
float2 CmdFill_end(const device char *buf, CmdFillRef ref) {
    return ((const device CmdFillPacked *)(buf + ref))->end;
}
struct CmdFillEdgePacked {
    uint tag;
    int sign;
    float y;
};
CmdFillEdgePacked CmdFillEdge_read(const device char *buf, CmdFillEdgeRef ref) {
    return *((const device CmdFillEdgePacked *)(buf + ref));
}
int CmdFillEdge_sign(const device char *buf, CmdFillEdgeRef ref) {
    return ((const device CmdFillEdgePacked *)(buf + ref))->sign;
}
float CmdFillEdge_y(const device char *buf, CmdFillEdgeRef ref) {
    return ((const device CmdFillEdgePacked *)(buf + ref))->y;
}
struct CmdDrawFillPacked {
    uint tag;
    int backdrop;
    uint rgba_color;
};
CmdDrawFillPacked CmdDrawFill_read(const device char *buf, CmdDrawFillRef ref) {
    return *((const device CmdDrawFillPacked *)(buf + ref));
}
int CmdDrawFill_backdrop(const device char *buf, CmdDrawFillRef ref) {
    return ((const device CmdDrawFillPacked *)(buf + ref))->backdrop;
}
uint CmdDrawFill_rgba_color(const device char *buf, CmdDrawFillRef ref) {
    return ((const device CmdDrawFillPacked *)(buf + ref))->rgba_color;
}
struct CmdSolidPacked {
    uint tag;
    uint rgba_color;
};
CmdSolidPacked CmdSolid_read(const device char *buf, CmdSolidRef ref) {
    return *((const device CmdSolidPacked *)(buf + ref));
}
uint CmdSolid_rgba_color(const device char *buf, CmdSolidRef ref) {
    return ((const device CmdSolidPacked *)(buf + ref))->rgba_color;
}
struct Cmd {
    uint tag;
    uint body[5];
};
Cmd Cmd_read(const device char *buf, CmdRef ref) {
    return *((const device Cmd *)(buf + ref));
}
uint Cmd_tag(const device char *buf, CmdRef ref) {
    return ((const device Cmd *)(buf + ref))->tag;
}
#define Cmd_End 1
#define Cmd_Circle 2
CmdCirclePacked CmdCircle_load(const thread Cmd &s) {
    CmdCirclePacked r;
    r.tag = s.tag;
    r.bbox = *((const thread ushort4 *)((const thread char *)&s + 8));
    return r;
}
#define Cmd_Line 3
CmdLinePacked CmdLine_load(const thread Cmd &s) {
    CmdLinePacked r;
    r.tag = s.tag;
    r.start = *((const thread float2 *)((const thread char *)&s + 8));
    r.end = *((const thread float2 *)((const thread char *)&s + 16));
    return r;
}
#define Cmd_Fill 4
CmdFillPacked CmdFill_load(const thread Cmd &s) {
    CmdFillPacked r;
    r.tag = s.tag;
    r.start = *((const thread float2 *)((const thread char *)&s + 8));
    r.end = *((const thread float2 *)((const thread char *)&s + 16));
    return r;
}
#define Cmd_Stroke 5
CmdStrokePacked CmdStroke_load(const thread Cmd &s) {
    CmdStrokePacked r;
    r.tag = s.tag;
    r.halfWidth = *((const thread float *)((const thread char *)&s + 4));
    r.rgba_color = *((const thread uint *)((const thread char *)&s + 8));
    return r;
}
#define Cmd_FillEdge 6
CmdFillEdgePacked CmdFillEdge_load(const thread Cmd &s) {
    CmdFillEdgePacked r;
    r.tag = s.tag;
    r.sign = *((const thread int *)((const thread char *)&s + 4));
    r.y = *((const thread float *)((const thread char *)&s + 8));
    return r;
}
#define Cmd_DrawFill 7
CmdDrawFillPacked CmdDrawFill_load(const thread Cmd &s) {
    CmdDrawFillPacked r;
    r.tag = s.tag;
    r.backdrop = *((const thread int *)((const thread char *)&s + 4));
    r.rgba_color = *((const thread uint *)((const thread char *)&s + 8));
    return r;
}
#define Cmd_Solid 8
CmdSolidPacked CmdSolid_load(const thread Cmd &s) {
    CmdSolidPacked r;
    r.tag = s.tag;
    r.rgba_color = *((const thread uint *)((const thread char *)&s + 4));
    return r;
}
#define Cmd_Bail 9

void CmdCircle_write(device char *buf, CmdCircleRef ref, CmdCirclePacked s) {
    *((device CmdCirclePacked *)(buf + ref)) = s;
}
void CmdLine_write(device char *buf, CmdLineRef ref, CmdLinePacked s) {
    *((device CmdLinePacked *)(buf + ref)) = s;
}
void CmdStroke_write(device char *buf, CmdStrokeRef ref, CmdStrokePacked s) {
    *((device CmdStrokePacked *)(buf + ref)) = s;
}
void CmdFill_write(device char *buf, CmdFillRef ref, CmdFillPacked s) {
    *((device CmdFillPacked *)(buf + ref)) = s;
}
void CmdFillEdge_write(device char *buf, CmdFillEdgeRef ref, CmdFillEdgePacked s) {
    *((device CmdFillEdgePacked *)(buf + ref)) = s;
}
void CmdDrawFill_write(device char *buf, CmdDrawFillRef ref, CmdDrawFillPacked s) {
    *((device CmdDrawFillPacked *)(buf + ref)) = s;
}
void CmdSolid_write(device char *buf, CmdSolidRef ref, CmdSolidPacked s) {
    *((device CmdSolidPacked *)(buf + ref)) = s;
}
void Cmd_write_tag(device char *buf, CmdRef ref, uint tag) {
    ((device Cmd *)(buf + ref))->tag = tag;
}

