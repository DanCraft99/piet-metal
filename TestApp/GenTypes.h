//  Copyright 2019 The xi-editor authors.

// This file is currently something of a mishmash of handwritten and
// autogenerated header info.

typedef struct
{
    // This is a clip space coordinate (-1 to 1).
    vector_float2 position;
    // This is now an integer coordinate for reading the texture.
    vector_float2 textureCoordinate;
} RenderVertex;

typedef enum RenderVertexInputIndex
{
    RenderVertexInputIndexVertices = 0,
} RenderVertexInputIndex;

// Size in pixels of an individual tile
#define tileWidth 16
#define tileHeight 16

// Size (in tiles) of a threadgroup for tiling
#define tilerGroupWidth 16
#define tilerGroupHeight 2

// The number of bytes in a buffer for a single tile.
// For prototyping, this is a hard maximum, but for production we'd want
// a mechanism to overflow.
#define tileBufSize 4096

// For simplicity, we're going to hardcode these dimensions. For production,
// they need to be dynamic.
#define maxTilesWidth 256
#define maxTilesHeight 256

// This should be an enum but the storage needs to be of fixed size
#define PIET_ITEM_CIRCLE 1
#define PIET_ITEM_LINE 2
#define PIET_ITEM_FILL 3
#define PIET_ITEM_STROKE_POLYLINE 4

// Autogen part follows:

typedef uint SimpleGroupRef;
typedef uint PietCircleRef;
typedef uint PietStrokeLineRef;
typedef uint PietFillRef;
typedef uint PietStrokePolyLineRef;
typedef uint PietItemRef;
struct SimpleGroupPacked {
    uint n_items;
    PietItemRef items_ix;
    ushort4 bbox;
};
SimpleGroupPacked SimpleGroup_read(const device char *buf, SimpleGroupRef ref) {
    return *((const device SimpleGroupPacked *)(buf + ref));
}
uint SimpleGroup_n_items(const device char *buf, SimpleGroupRef ref) {
    return ((const device SimpleGroupPacked *)(buf + ref))->n_items;
}
PietItemRef SimpleGroup_items_ix(const device char *buf, SimpleGroupRef ref) {
    return ((const device SimpleGroupPacked *)(buf + ref))->items_ix;
}
ushort4 SimpleGroup_bbox(const device char *buf, SimpleGroupRef ref) {
    return ((const device SimpleGroupPacked *)(buf + ref))->bbox;
}
struct PietCirclePacked {
    uint tag;
};
PietCirclePacked PietCircle_read(const device char *buf, PietCircleRef ref) {
    return *((const device PietCirclePacked *)(buf + ref));
}
struct PietStrokeLinePacked {
    uint tag;
    uint flags;
    uint rgba_color;
    float width;
    float2 start;
    float2 end;
};
PietStrokeLinePacked PietStrokeLine_read(const device char *buf, PietStrokeLineRef ref) {
    return *((const device PietStrokeLinePacked *)(buf + ref));
}
uint PietStrokeLine_flags(const device char *buf, PietStrokeLineRef ref) {
    return ((const device PietStrokeLinePacked *)(buf + ref))->flags;
}
uint PietStrokeLine_rgba_color(const device char *buf, PietStrokeLineRef ref) {
    return ((const device PietStrokeLinePacked *)(buf + ref))->rgba_color;
}
float PietStrokeLine_width(const device char *buf, PietStrokeLineRef ref) {
    return ((const device PietStrokeLinePacked *)(buf + ref))->width;
}
float2 PietStrokeLine_start(const device char *buf, PietStrokeLineRef ref) {
    return ((const device PietStrokeLinePacked *)(buf + ref))->start;
}
float2 PietStrokeLine_end(const device char *buf, PietStrokeLineRef ref) {
    return ((const device PietStrokeLinePacked *)(buf + ref))->end;
}
struct PietFillPacked {
    uint tag;
    uint flags;
    uint rgba_color;
    uint n_points;
    uint points_ix;
};
PietFillPacked PietFill_read(const device char *buf, PietFillRef ref) {
    return *((const device PietFillPacked *)(buf + ref));
}
uint PietFill_flags(const device char *buf, PietFillRef ref) {
    return ((const device PietFillPacked *)(buf + ref))->flags;
}
uint PietFill_rgba_color(const device char *buf, PietFillRef ref) {
    return ((const device PietFillPacked *)(buf + ref))->rgba_color;
}
uint PietFill_n_points(const device char *buf, PietFillRef ref) {
    return ((const device PietFillPacked *)(buf + ref))->n_points;
}
uint PietFill_points_ix(const device char *buf, PietFillRef ref) {
    return ((const device PietFillPacked *)(buf + ref))->points_ix;
}
struct PietStrokePolyLinePacked {
    uint tag;
    uint rgba_color;
    float width;
    uint n_points;
    uint points_ix;
};
PietStrokePolyLinePacked PietStrokePolyLine_read(const device char *buf, PietStrokePolyLineRef ref) {
    return *((const device PietStrokePolyLinePacked *)(buf + ref));
}
uint PietStrokePolyLine_rgba_color(const device char *buf, PietStrokePolyLineRef ref) {
    return ((const device PietStrokePolyLinePacked *)(buf + ref))->rgba_color;
}
float PietStrokePolyLine_width(const device char *buf, PietStrokePolyLineRef ref) {
    return ((const device PietStrokePolyLinePacked *)(buf + ref))->width;
}
uint PietStrokePolyLine_n_points(const device char *buf, PietStrokePolyLineRef ref) {
    return ((const device PietStrokePolyLinePacked *)(buf + ref))->n_points;
}
uint PietStrokePolyLine_points_ix(const device char *buf, PietStrokePolyLineRef ref) {
    return ((const device PietStrokePolyLinePacked *)(buf + ref))->points_ix;
}
struct PietItem {
    uint tag;
    uint body[7];
};
uint PietItem_tag(const device char *buf, PietItemRef ref) {
    return ((const device PietItem *)(buf + ref))->tag;
}
#define PietItem_Circle 1
#define PietItem_Line 2
#define PietItem_Fill 3
#define PietItem_Poly 4

